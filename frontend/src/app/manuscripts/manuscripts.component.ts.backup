import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup } from '@angular/forms';
import { Subscription, interval, debounceTime, distinctUntilChanged } from 'rxjs';
import { ManuscriptService, ManuscriptResponse, ManuscriptListResponse, ManuscriptStatistics } from '../shared/services/manuscript.service';
import { ErrorHandlerService } from '../shared/services/error-handler.service';
import { NavigationComponent } from '../shared/components/navigation/navigation.component';
import { FileUploadComponent, FileUploadConfig } from '../shared/components/file-upload/file-upload.component';
import { LoadingComponent } from '../shared/components/loading/loading.component';
import { ConfirmationDialogComponent } from '../shared/components/confirmation-dialog/confirmation-dialog.component';

@Component({
  selector: 'app-manuscripts',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule, NavigationComponent, FileUploadComponent, LoadingComponent, ConfirmationDialogComponent],
  template: `
    <div class="min-h-screen bg-gray-50">
      <app-navigation></app-navigation>

      <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div class="px-4 py-6 sm:px-0">
          <!-- Header with Statistics -->
          <div class="mb-8">
            <div class="sm:flex sm:items-center sm:justify-between mb-6">
              <div>
                <h1 class="text-3xl font-bold text-gray-900">Manuscripts</h1>
                <p class="mt-1 text-sm text-gray-600">
                  Manage your PDF manuscripts and track processing status
                </p>
              </div>
              <div class="mt-4 sm:mt-0 flex space-x-3">
                <button
                  type="button"
                  class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  (click)="refreshManuscripts()"
                  [disabled]="isLoading"
                >
                  <svg class="-ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Refresh
                </button>
                <button
                  type="button"
                  class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  (click)="openUploadModal()"
                >
                  <svg class="-ml-1 mr-2 h-5 w-5" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  Upload Manuscript
                </button>
              </div>
            </div>

            <!-- Statistics Cards -->
            <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-6" *ngIf="statistics">
              <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                  <div class="flex items-center">
                    <div class="flex-shrink-0">
                      <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                      <dl>
                        <dt class="text-sm font-medium text-gray-500 truncate">Total</dt>
                        <dd class="text-lg font-medium text-gray-900">{{ statistics.total }}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                  <div class="flex items-center">
                    <div class="flex-shrink-0">
                      <svg class="h-6 w-6 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                      <dl>
                        <dt class="text-sm font-medium text-gray-500 truncate">Processing</dt>
                        <dd class="text-lg font-medium text-gray-900">{{ statistics.processing }}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                  <div class="flex items-center">
                    <div class="flex-shrink-0">
                      <svg class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                      <dl>
                        <dt class="text-sm font-medium text-gray-500 truncate">Completed</dt>
                        <dd class="text-lg font-medium text-gray-900">{{ statistics.completed }}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="p-5">
                  <div class="flex items-center">
                    <div class="flex-shrink-0">
                      <svg class="h-6 w-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                      <dl>
                        <dt class="text-sm font-medium text-gray-500 truncate">Failed</dt>
                        <dd class="text-lg font-medium text-gray-900">{{ statistics.failed }}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Filters and Search -->
          <div class="bg-white shadow rounded-lg mb-6">
            <div class="px-4 py-5 sm:p-6">
              <div class="grid grid-cols-1 gap-4 sm:grid-cols-4">
                <!-- Search -->
                <div class="sm:col-span-2">
                  <label for="search" class="block text-sm font-medium text-gray-700">Search</label>
                  <div class="mt-1 relative rounded-md shadow-sm">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                    </div>
                    <input
                      type="text"
                      id="search"
                      [(ngModel)]="searchTerm"
                      (input)="applyFilters()"
                      class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
                      placeholder="Search manuscripts..."
                    />
                  </div>
                </div>

                <!-- Status Filter -->
                <div>
                  <label for="statusFilter" class="block text-sm font-medium text-gray-700">Status</label>
                  <select
                    id="statusFilter"
                    [(ngModel)]="statusFilter"
                    (change)="applyFilters()"
                    class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                  >
                    <option value="">All Statuses</option>
                    <option value="pending">Pending</option>
                    <option value="processing">Processing</option>
                    <option value="completed">Completed</option>
                    <option value="failed">Failed</option>
                  </select>
                </div>

                <!-- Sort -->
                <div>
                  <label for="sortBy" class="block text-sm font-medium text-gray-700">Sort By</label>
                  <select
                    id="sortBy"
                    [(ngModel)]="sortBy"
                    (change)="applyFilters()"
                    class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                  >
                    <option value="upload_date_desc">Newest First</option>
                    <option value="upload_date_asc">Oldest First</option>
                    <option value="file_name_asc">Name A-Z</option>
                    <option value="file_name_desc">Name Z-A</option>
                    <option value="status_asc">Status</option>
                  </select>
                </div>
              </div>
            </div>
          </div>

          <!-- Statistics -->
          <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-6">
            <div class="bg-white overflow-hidden shadow rounded-lg">
              <div class="p-5">
                <div class="flex items-center">
                  <div class="flex-shrink-0">
                    <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <div class="ml-5 w-0 flex-1">
                    <dl>
                      <dt class="text-sm font-medium text-gray-500 truncate">Total</dt>
                      <dd class="text-lg font-medium text-gray-900">{{ manuscripts.length }}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div class="bg-white overflow-hidden shadow rounded-lg">
              <div class="p-5">
                <div class="flex items-center">
                  <div class="flex-shrink-0">
                    <svg class="h-6 w-6 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div class="ml-5 w-0 flex-1">
                    <dl>
                      <dt class="text-sm font-medium text-gray-500 truncate">Processing</dt>
                      <dd class="text-lg font-medium text-gray-900">{{ getManuscriptsByStatus('processing').length }}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div class="bg-white overflow-hidden shadow rounded-lg">
              <div class="p-5">
                <div class="flex items-center">
                  <div class="flex-shrink-0">
                    <svg class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div class="ml-5 w-0 flex-1">
                    <dl>
                      <dt class="text-sm font-medium text-gray-500 truncate">Completed</dt>
                      <dd class="text-lg font-medium text-gray-900">{{ getManuscriptsByStatus('completed').length }}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div class="bg-white overflow-hidden shadow rounded-lg">
              <div class="p-5">
                <div class="flex items-center">
                  <div class="flex-shrink-0">
                    <svg class="h-6 w-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                  </div>
                  <div class="ml-5 w-0 flex-1">
                    <dl>
                      <dt class="text-sm font-medium text-gray-500 truncate">Failed</dt>
                      <dd class="text-lg font-medium text-gray-900">{{ getManuscriptsByStatus('failed').length }}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Manuscripts List -->
          <div class="bg-white shadow overflow-hidden sm:rounded-md">
            <!-- Loading State -->
            <div *ngIf="isLoading" class="p-6 text-center">
              <div class="inline-flex items-center">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Loading manuscripts...
              </div>
            </div>

            <!-- Empty State -->
            <div *ngIf="!isLoading && filteredManuscripts.length === 0" class="text-center py-12">
              <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900">
                {{ manuscripts.length === 0 ? 'No manuscripts' : 'No manuscripts match your filters' }}
              </h3>
              <p class="mt-1 text-sm text-gray-500">
                {{ manuscripts.length === 0 ? 'Get started by uploading your first manuscript.' : 'Try adjusting your search or filter criteria.' }}
              </p>
              <div class="mt-6" *ngIf="manuscripts.length === 0">
                <button
                  type="button"
                  class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  (click)="triggerFileUpload()"
                >
                  <svg class="-ml-1 mr-2 h-5 w-5" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  Upload Manuscript
                </button>
              </div>
            </div>

            <!-- Manuscripts List -->
            <ul *ngIf="!isLoading && filteredManuscripts.length > 0" class="divide-y divide-gray-200">
              <li *ngFor="let manuscript of filteredManuscripts" class="px-6 py-4 hover:bg-gray-50">
                <div class="flex items-center justify-between">
                  <div class="flex items-center min-w-0 flex-1">
                    <div class="flex-shrink-0">
                      <svg class="h-10 w-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    </div>
                    <div class="ml-4 min-w-0 flex-1">
                      <div class="flex items-center">
                        <p class="text-sm font-medium text-gray-900 truncate">
                          {{ manuscript.file_name || 'Untitled Document' }}
                        </p>
                        <span [ngClass]="getStatusClass(manuscript.status)" 
                              class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium">
                          {{ manuscript.status }}
                        </span>
                      </div>
                      <div class="mt-1 flex items-center text-sm text-gray-500 space-x-4">
                        <span>Uploaded {{ manuscript.upload_date | date:'short' }}</span>
                        <span class="flex items-center">
                          <svg class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                          </svg>
                          PDF Document
                        </span>
                        <span *ngIf="manuscript.processing_completed_at" class="flex items-center">
                          <svg class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          Completed {{ manuscript.processing_completed_at | date:'short' }}
                        </span>
                      </div>
                      <div *ngIf="manuscript.error_message" class="mt-1 text-sm text-red-600">
                        {{ manuscript.error_message }}
                      </div>
                    </div>
                  </div>
                  
                  <div class="flex items-center space-x-2 ml-4">
                    <!-- Download Button -->
                    <button
                      *ngIf="manuscript.status === 'complete'"
                      type="button"
                      class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                      (click)="downloadManuscript(manuscript)"
                    >
                      <svg class="-ml-0.5 mr-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-4-4m4 4l4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Download
                    </button>

                    <!-- Retry Button -->
                    <button
                      *ngIf="manuscript.status === 'failed'"
                      type="button"
                      class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-yellow-700 bg-yellow-100 hover:bg-yellow-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500"
                      (click)="retryProcessing(manuscript)"
                    >
                      <svg class="-ml-0.5 mr-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                      </svg>
                      Retry
                    </button>

                    <!-- Delete Button -->
                    <button
                      type="button"
                      class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                      (click)="deleteManuscript(manuscript)"
                    >
                      <svg class="-ml-0.5 mr-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                      Delete
                    </button>
                  </div>
                </div>
              </li>
            </ul>
          </div>
        </div>
      </main>

      <!-- Hidden file input -->
      <input
        #fileInput
        type="file"
        class="hidden"
        accept=".pdf"
        (change)="onFileSelected($event)"
      />
    </div>
  `
})
export class ManuscriptsComponent implements OnInit, OnDestroy {
  manuscripts: ManuscriptResponse[] = [];
  filteredManuscripts: ManuscriptResponse[] = [];
  isLoading = false;
  
  // Filters
  searchTerm = '';
  statusFilter = '';
  sortBy = 'upload_date_desc';
  
  private subscription?: Subscription;

  constructor(
    private manuscriptService: ManuscriptService,
    private errorHandler: ErrorHandlerService
  ) {}

  ngOnInit(): void {
    this.loadManuscripts();
  }

  ngOnDestroy(): void {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  loadManuscripts(): void {
    this.isLoading = true;
    this.manuscriptService.getManuscripts().subscribe({
      next: (response) => {
        this.manuscripts = response.manuscripts;
        this.applyFilters();
        this.isLoading = false;
      },
      error: (error: any) => {
        this.errorHandler.showError(error);
        this.isLoading = false;
      }
    });
  }

  applyFilters(): void {
    let filtered = [...this.manuscripts];

    // Apply search filter
    if (this.searchTerm.trim()) {
      const searchLower = this.searchTerm.toLowerCase();
      filtered = filtered.filter(m => 
        m.file_name?.toLowerCase().includes(searchLower)
      );
    }

    // Apply status filter
    if (this.statusFilter) {
      filtered = filtered.filter(m => m.status === this.statusFilter);
    }

    // Apply sorting
    filtered.sort((a, b) => {
      switch (this.sortBy) {
        case 'upload_date_desc':
          return new Date(b.upload_date).getTime() - new Date(a.upload_date).getTime();
        case 'upload_date_asc':
          return new Date(a.upload_date).getTime() - new Date(b.upload_date).getTime();
        case 'file_name_asc':
          return (a.file_name || '').localeCompare(b.file_name || '');
        case 'file_name_desc':
          return (b.file_name || '').localeCompare(a.file_name || '');
        case 'status_asc':
          return a.status.localeCompare(b.status);
        default:
          return 0;
      }
    });

    this.filteredManuscripts = filtered;
  }

  getManuscriptsByStatus(status: string): ManuscriptResponse[] {
    return this.manuscripts.filter(m => m.status === status);
  }

  getStatusClass(status: string): string {
    switch (status.toLowerCase()) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'processing':
        return 'bg-blue-100 text-blue-800';
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'failed':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  }

  formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  triggerFileUpload(): void {
    const fileInput = document.querySelector('input[type="file"]') as HTMLInputElement;
    if (fileInput) {
      fileInput.click();
    }
  }

  onFileSelected(event: Event): void {
    const target = event.target as HTMLInputElement;
    const file = target.files?.[0];
    
    if (file) {
      if (file.type !== 'application/pdf') {
        this.errorHandler.showError('Please select a PDF file');
        return;
      }
      
      if (file.size > 10 * 1024 * 1024) { // 10MB limit
        this.errorHandler.showError('File size must be less than 10MB');
        return;
      }
      
      this.uploadFile(file);
    }
  }

  private uploadFile(file: File): void {
    this.manuscriptService.uploadManuscript(file).subscribe({
      next: (progress) => {
        if (progress.type === 'complete') {
          this.errorHandler.showSuccess('File uploaded successfully');
          this.loadManuscripts(); // Reload manuscripts to show the new one
        }
      },
      error: (error: any) => {
        this.errorHandler.showError(error);
      }
    });
  }

  downloadManuscript(manuscript: ManuscriptResponse): void {
    this.manuscriptService.getDownloadUrl(manuscript.id).subscribe({
      next: (response) => {
        // Create a temporary link and trigger download
        const link = document.createElement('a');
        link.href = response.download_url;
        link.download = manuscript.file_name || 'manuscript.docx';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.errorHandler.showSuccess('Download started');
      },
      error: (error: any) => {
        this.errorHandler.showError(error);
      }
    });
  }

  retryProcessing(manuscript: ManuscriptResponse): void {
    // This would trigger reprocessing on the backend
    this.errorHandler.showInfo('Retry processing functionality will be implemented in Phase 4');
  }

  deleteManuscript(manuscript: ManuscriptResponse): void {
    if (confirm(`Are you sure you want to delete "${manuscript.file_name}"? This action cannot be undone.`)) {
      this.manuscriptService.deleteManuscript(manuscript.id).subscribe({
        next: () => {
          this.errorHandler.showSuccess('Manuscript deleted successfully');
          this.manuscripts = this.manuscripts.filter(m => m.id !== manuscript.id);
          this.applyFilters();
        },
        error: (error: any) => {
          this.errorHandler.showError(error);
        }
      });
    }
  }
}
